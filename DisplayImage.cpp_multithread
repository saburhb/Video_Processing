#include <iostream>
#include <stdio.h>
#include <opencv2/opencv.hpp>
#include<iterator>
#include<pthread.h>

#define	NUM_THREADS	2

pthread_t tid[NUM_THREADS];

using namespace cv;
using namespace std;



void nms(
	const vector<Rect>& srcRects,
	vector<Rect>& resRects,
	float thresh
	)
{
	resRects.clear();

	const size_t size = srcRects.size();
	if (!size)
	{
		return;
	}

	// Sort the bounding boxes by the bottom - right y - coordinate of the bounding box
	std::multimap<int, size_t> idxs;
	for (size_t i = 0; i < size; ++i)
	{
		idxs.insert(std::pair<int, size_t>(srcRects[i].br().y, i));
	}

	// keep looping while some indexes still remain in the indexes list
	while (idxs.size() > 0)
	{
		// grab the last rectangle
		auto lastElem = --std::end(idxs);
		const Rect& rect1 = srcRects[lastElem->second];

		resRects.push_back(rect1);

		idxs.erase(lastElem);

		if(idxs.size() > 0){
		for (auto pos = std::begin(idxs); pos != std::end(idxs); )
		{
			// grab the current rectangle
			const Rect& rect2 = srcRects[pos->second];

			float intArea = (rect1 & rect2).area();
			float unionArea = rect1.area() + rect2.area() - intArea;
			float overlap = intArea / unionArea;

			// if there is sufficient overlap, suppress the current bounding box
			if (overlap > thresh)
			{
				pos = idxs.erase(pos);
			}
			else
			{
				++pos;
			}
		}
		}
	}
}



void* detectPedsRef(void *arg)
{

    //Object detection code
    CascadeClassifier pedDetector;
    pedDetector.load("cascade15.xml");

    String path("/home/sbaidya/test/TestData/*.pgm");
    //String path("/home/sbaidya/test/Data5/*.pgm");
    
    vector<String> fn;
    glob(path, fn, true);

    for(size_t k=0; k<fn.size(); ++k)
    {
        Mat image = imread(fn[k]);
        std::vector<Rect> peds;

        // Detect peds
        pedDetector.detectMultiScale(image, peds, 2.5, 3, 0 | CV_HAAR_SCALE_IMAGE, Size(20, 50), Size(200, 500));

        vector<Rect> nmsRect;
        nms(peds, nmsRect, 0.9);

        for (int i = 0; i < (int) nmsRect.size(); i++)
        {
                Point pt1(nmsRect[i].x, nmsRect[i].y);
                Point pt2(nmsRect[i].x + nmsRect[i].width,nmsRect[i].y + nmsRect[i].height);

                // Draw a rectangle around the detected pedestrian
                rectangle(image, pt1, pt2, Scalar(0, 0, 255), 2);
                putText(image, "Pedestran", pt1, FONT_HERSHEY_PLAIN, 1.0, Scalar(0, 255, 0), 2.0);

        }

        namedWindow("Display Image1", WINDOW_AUTOSIZE );
        moveWindow("Display Image1", 100, 50);
        imshow("Display Image1", image);
        waitKey(40);
    }

}


void* detectPedsRcv(void *arg)
{

    //Object detection code
    CascadeClassifier pedDetector;
    pedDetector.load("cascade15.xml");

    //String path("/home/sbaidya/test/TestData/*.pgm");
    String path("/home/sbaidya/test/Data5/*.pgm");
    
    vector<String> fn;
    glob(path, fn, true);

    for(size_t k=0; k<fn.size(); ++k)
    {
        Mat image = imread(fn[k]);
        std::vector<Rect> peds;

        // Detect peds
        pedDetector.detectMultiScale(image, peds, 2.5, 3, 0 | CV_HAAR_SCALE_IMAGE, Size(20, 50), Size(200, 500));

        vector<Rect> nmsRect;
        nms(peds, nmsRect, 0.9);

        for (int i = 0; i < (int) nmsRect.size(); i++)
        {
                Point pt1(nmsRect[i].x, nmsRect[i].y);
                Point pt2(nmsRect[i].x + nmsRect[i].width,nmsRect[i].y + nmsRect[i].height);

                // Draw a rectangle around the detected pedestrian
                rectangle(image, pt1, pt2, Scalar(0, 0, 255), 2);
                putText(image, "Pedestran", pt1, FONT_HERSHEY_PLAIN, 1.0, Scalar(0, 255, 0), 2.0);

        }

        namedWindow("Display Image", WINDOW_AUTOSIZE );
        moveWindow("Display Image",500 , 500);
        imshow("Display Image", image);
        waitKey(30);
    }

}

int main(int argc, char** argv )
{
   int err;
   int *ptr[NUM_THREADS];

//   if (argc != 2){
//   	printf("Error usage : %s <image_dir_name>\n",argv[0]);
//      	return EXIT_FAILURE;
//    }

    err = pthread_create(&(tid[0]), NULL, &detectPedsRef, NULL);
    if(err != 0)
            printf("\n can't create thread : [%s]", strerror(err));
    else
            printf("\n Thread created successfully \n");

    err = pthread_create(&(tid[1]), NULL, &detectPedsRcv, NULL);
    if(err != 0)
            printf("\n can't create thread : [%s]", strerror(err));
    else
            printf("\n Thread created successfully \n");


    pthread_join(tid[0], (void**)&(ptr[0]));
    pthread_join(tid[1], (void**)&(ptr[1]));



    return 0;
}




